/// <reference types="screeps" />
import { attackTargetType, TaskAttack } from './TaskInstances/task_attack';
import { buildTargetType, TaskBuild } from './TaskInstances/task_build';
import { claimTargetType, TaskClaim } from './TaskInstances/task_claim';
import { dismantleTargetType, TaskDismantle } from './TaskInstances/task_dismantle';
import { fortifyTargetType, TaskFortify } from './TaskInstances/task_fortify';
import { getBoostedTargetType, TaskGetBoosted } from './TaskInstances/task_getBoosted';
import { getRenewedTargetType, TaskGetRenewed } from './TaskInstances/task_getRenewed';
import { goToTargetType, TaskGoTo } from './TaskInstances/task_goTo';
import { goToRoomTargetType, TaskGoToRoom } from './TaskInstances/task_goToRoom';
import { harvestTargetType, TaskHarvest } from './TaskInstances/task_harvest';
import { healTargetType, TaskHeal } from './TaskInstances/task_heal';
import { meleeAttackTargetType, TaskMeleeAttack } from './TaskInstances/task_meleeAttack';
import { pickupTargetType, TaskPickup } from './TaskInstances/task_pickup';
import { rangedAttackTargetType, TaskRangedAttack } from './TaskInstances/task_rangedAttack';
import { repairTargetType, TaskRepair } from './TaskInstances/task_repair';
import { reserveTargetType, TaskReserve } from './TaskInstances/task_reserve';
import { signControllerTargetType, TaskSignController } from './TaskInstances/task_signController';
import { TaskTransfer, transferTargetType } from './TaskInstances/task_transfer';
import { TaskUpgrade, upgradeTargetType } from './TaskInstances/task_upgrade';
import { TaskWithdraw, withdrawTargetType } from './TaskInstances/task_withdraw';
import { dropTargetType, TaskDrop } from './TaskInstances/task_drop';
import { TaskTransferAll, transferAllTargetType } from './TaskInstances/task_transferAll';
import { TaskWithdrawAll, withdrawAllTargetType } from './TaskInstances/task_withdrawAll';
export declare class Tasks {
    static chain(tasks: ITask[], setNextPos?: boolean): ITask | null;
    static attack(target: attackTargetType, options?: TaskOptions): TaskAttack;
    static build(target: buildTargetType, options?: TaskOptions): TaskBuild;
    static claim(target: claimTargetType, options?: TaskOptions): TaskClaim;
    static dismantle(target: dismantleTargetType, options?: TaskOptions): TaskDismantle;
    static drop(target: dropTargetType, resourceType?: ResourceConstant, amount?: number | undefined, options?: TaskOptions): TaskDrop;
    static fortify(target: fortifyTargetType, options?: TaskOptions): TaskFortify;
    static getBoosted(target: getBoostedTargetType, boostType: _ResourceConstantSansEnergy, amount?: number | undefined, options?: TaskOptions): TaskGetBoosted;
    static getRenewed(target: getRenewedTargetType, options?: TaskOptions): TaskGetRenewed;
    static goTo(target: goToTargetType, options?: TaskOptions): TaskGoTo;
    static goToRoom(target: goToRoomTargetType, options?: TaskOptions): TaskGoToRoom;
    static harvest(target: harvestTargetType, options?: TaskOptions): TaskHarvest;
    static heal(target: healTargetType, options?: TaskOptions): TaskHeal;
    static meleeAttack(target: meleeAttackTargetType, options?: TaskOptions): TaskMeleeAttack;
    static pickup(target: pickupTargetType, options?: TaskOptions): TaskPickup;
    static rangedAttack(target: rangedAttackTargetType, options?: TaskOptions): TaskRangedAttack;
    static repair(target: repairTargetType, options?: TaskOptions): TaskRepair;
    static reserve(target: reserveTargetType, options?: TaskOptions): TaskReserve;
    static signController(target: signControllerTargetType, signature: string, options?: TaskOptions): TaskSignController;
    static transfer(target: transferTargetType, resourceType?: ResourceConstant, amount?: number | undefined, options?: TaskOptions): TaskTransfer;
    static transferAll(target: transferAllTargetType, skipEnergy?: boolean, options?: TaskOptions): TaskTransferAll;
    static upgrade(target: upgradeTargetType, options?: TaskOptions): TaskUpgrade;
    static withdraw(target: withdrawTargetType, resourceType?: ResourceConstant, amount?: number | undefined, options?: TaskOptions): TaskWithdraw;
    static withdrawAll(target: withdrawAllTargetType, options?: TaskOptions): TaskWithdrawAll;
}
